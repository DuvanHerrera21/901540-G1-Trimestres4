/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.ejemplodao.jdbc;

import edu.co.sena.ejemplodao.dao.*;
import edu.co.sena.ejemplodao.factory.*;
import java.util.Date;
import edu.co.sena.ejemplodao.dto.*;
import edu.co.sena.ejemplodao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class InventarioComprasDaoImpl extends AbstractDAO implements InventarioComprasDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_INVENTARIO, PRODUCTO_ID_PRODUCTO, PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO, PROVEEDOR_NUM_DOCUMENTO, FECHA_COMPRA, CAN_PRO_COMPRADO, PRECIO_POR_MAYOR, OBSERVACIONES FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_INVENTARIO, PRODUCTO_ID_PRODUCTO, PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO, PROVEEDOR_NUM_DOCUMENTO, FECHA_COMPRA, CAN_PRO_COMPRADO, PRECIO_POR_MAYOR, OBSERVACIONES ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_INVENTARIO = ?, PRODUCTO_ID_PRODUCTO = ?, PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ?, PROVEEDOR_NUM_DOCUMENTO = ?, FECHA_COMPRA = ?, CAN_PRO_COMPRADO = ?, PRECIO_POR_MAYOR = ?, OBSERVACIONES = ? WHERE ID_INVENTARIO = ? AND PRODUCTO_ID_PRODUCTO = ? AND PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND PROVEEDOR_NUM_DOCUMENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_INVENTARIO = ? AND PRODUCTO_ID_PRODUCTO = ? AND PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND PROVEEDOR_NUM_DOCUMENTO = ?";

	/** 
	 * Index of column ID_INVENTARIO
	 */
	protected static final int COLUMN_ID_INVENTARIO = 1;

	/** 
	 * Index of column PRODUCTO_ID_PRODUCTO
	 */
	protected static final int COLUMN_PRODUCTO_ID_PRODUCTO = 2;

	/** 
	 * Index of column PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int COLUMN_PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 3;

	/** 
	 * Index of column PROVEEDOR_NUM_DOCUMENTO
	 */
	protected static final int COLUMN_PROVEEDOR_NUM_DOCUMENTO = 4;

	/** 
	 * Index of column FECHA_COMPRA
	 */
	protected static final int COLUMN_FECHA_COMPRA = 5;

	/** 
	 * Index of column CAN_PRO_COMPRADO
	 */
	protected static final int COLUMN_CAN_PRO_COMPRADO = 6;

	/** 
	 * Index of column PRECIO_POR_MAYOR
	 */
	protected static final int COLUMN_PRECIO_POR_MAYOR = 7;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ID_INVENTARIO
	 */
	protected static final int PK_COLUMN_ID_INVENTARIO = 1;

	/** 
	 * Index of primary-key column PRODUCTO_ID_PRODUCTO
	 */
	protected static final int PK_COLUMN_PRODUCTO_ID_PRODUCTO = 2;

	/** 
	 * Index of primary-key column PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int PK_COLUMN_PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 3;

	/** 
	 * Index of primary-key column PROVEEDOR_NUM_DOCUMENTO
	 */
	protected static final int PK_COLUMN_PROVEEDOR_NUM_DOCUMENTO = 4;

	/** 
	 * Inserts a new row in the inventario_compras table.
	 */
	public InventarioComprasPk insert(InventarioCompras dto) throws InventarioComprasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdInventario() );
			stmt.setString( index++, dto.getProductoIdProducto() );
			stmt.setString( index++, dto.getProveedorTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getProveedorNumDocumento() );
			stmt.setDate(index++, dto.getFechaCompra()==null ? null : new java.sql.Date( dto.getFechaCompra().getTime() ) );
			if (dto.isCanProCompradoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCanProComprado() );
			}
		
			if (dto.isPrecioPorMayorNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrecioPorMayor() );
			}
		
			stmt.setString( index++, dto.getObservaciones() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioComprasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the inventario_compras table.
	 */
	public void update(InventarioComprasPk pk, InventarioCompras dto) throws InventarioComprasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdInventario() );
			stmt.setString( index++, dto.getProductoIdProducto() );
			stmt.setString( index++, dto.getProveedorTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getProveedorNumDocumento() );
			stmt.setDate(index++, dto.getFechaCompra()==null ? null : new java.sql.Date( dto.getFechaCompra().getTime() ) );
			if (dto.isCanProCompradoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCanProComprado() );
			}
		
			if (dto.isPrecioPorMayorNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrecioPorMayor() );
			}
		
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setInt( 9, pk.getIdInventario() );
			stmt.setString( 10, pk.getProductoIdProducto() );
			stmt.setString( 11, pk.getProveedorTipoDocumentoTipoDocumento() );
			stmt.setString( 12, pk.getProveedorNumDocumento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioComprasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the inventario_compras table.
	 */
	public void delete(InventarioComprasPk pk) throws InventarioComprasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdInventario() );
			stmt.setString( 2, pk.getProductoIdProducto() );
			stmt.setString( 3, pk.getProveedorTipoDocumentoTipoDocumento() );
			stmt.setString( 4, pk.getProveedorNumDocumento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioComprasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the inventario_compras table that matches the specified primary-key value.
	 */
	public InventarioCompras findByPrimaryKey(InventarioComprasPk pk) throws InventarioComprasDaoException
	{
		return findByPrimaryKey( pk.getIdInventario(), pk.getProductoIdProducto(), pk.getProveedorTipoDocumentoTipoDocumento(), pk.getProveedorNumDocumento() );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'ID_INVENTARIO = :idInventario AND PRODUCTO_ID_PRODUCTO = :productoIdProducto AND PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :proveedorTipoDocumentoTipoDocumento AND PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public InventarioCompras findByPrimaryKey(int idInventario, String productoIdProducto, String proveedorTipoDocumentoTipoDocumento, String proveedorNumDocumento) throws InventarioComprasDaoException
	{
		InventarioCompras ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_INVENTARIO = ? AND PRODUCTO_ID_PRODUCTO = ? AND PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND PROVEEDOR_NUM_DOCUMENTO = ?", new Object[] {  new Integer(idInventario), productoIdProducto, proveedorTipoDocumentoTipoDocumento, proveedorNumDocumento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria ''.
	 */
	public InventarioCompras[] findAll() throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_INVENTARIO, PRODUCTO_ID_PRODUCTO, PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO, PROVEEDOR_NUM_DOCUMENTO", null );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public InventarioCompras[] findByProducto(String productoIdProducto) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTO_ID_PRODUCTO = ?", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :proveedorTipoDocumentoTipoDocumento AND PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public InventarioCompras[] findByProveedor(String proveedorTipoDocumentoTipoDocumento, String proveedorNumDocumento) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND PROVEEDOR_NUM_DOCUMENTO = ?", new Object[] { proveedorTipoDocumentoTipoDocumento, proveedorNumDocumento } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'ID_INVENTARIO = :idInventario'.
	 */
	public InventarioCompras[] findWhereIdInventarioEquals(int idInventario) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_INVENTARIO = ? ORDER BY ID_INVENTARIO", new Object[] {  new Integer(idInventario) } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public InventarioCompras[] findWhereProductoIdProductoEquals(String productoIdProducto) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTO_ID_PRODUCTO = ? ORDER BY PRODUCTO_ID_PRODUCTO", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :proveedorTipoDocumentoTipoDocumento'.
	 */
	public InventarioCompras[] findWhereProveedorTipoDocumentoTipoDocumentoEquals(String proveedorTipoDocumentoTipoDocumento) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? ORDER BY PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO", new Object[] { proveedorTipoDocumentoTipoDocumento } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public InventarioCompras[] findWhereProveedorNumDocumentoEquals(String proveedorNumDocumento) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVEEDOR_NUM_DOCUMENTO = ? ORDER BY PROVEEDOR_NUM_DOCUMENTO", new Object[] { proveedorNumDocumento } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'FECHA_COMPRA = :fechaCompra'.
	 */
	public InventarioCompras[] findWhereFechaCompraEquals(Date fechaCompra) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_COMPRA = ? ORDER BY FECHA_COMPRA", new Object[] { fechaCompra==null ? null : new java.sql.Date( fechaCompra.getTime() ) } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'CAN_PRO_COMPRADO = :canProComprado'.
	 */
	public InventarioCompras[] findWhereCanProCompradoEquals(int canProComprado) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAN_PRO_COMPRADO = ? ORDER BY CAN_PRO_COMPRADO", new Object[] {  new Integer(canProComprado) } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'PRECIO_POR_MAYOR = :precioPorMayor'.
	 */
	public InventarioCompras[] findWherePrecioPorMayorEquals(float precioPorMayor) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_POR_MAYOR = ? ORDER BY PRECIO_POR_MAYOR", new Object[] {  new Float(precioPorMayor) } );
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public InventarioCompras[] findWhereObservacionesEquals(String observaciones) throws InventarioComprasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/**
	 * Method 'InventarioComprasDaoImpl'
	 * 
	 */
	public InventarioComprasDaoImpl()
	{
	}

	/**
	 * Method 'InventarioComprasDaoImpl'
	 * 
	 * @param userConn
	 */
	public InventarioComprasDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tienda_online2.inventario_compras";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected InventarioCompras fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			InventarioCompras dto = new InventarioCompras();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected InventarioCompras[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			InventarioCompras dto = new InventarioCompras();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		InventarioCompras ret[] = new InventarioCompras[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(InventarioCompras dto, ResultSet rs) throws SQLException
	{
		dto.setIdInventario( rs.getInt( COLUMN_ID_INVENTARIO ) );
		dto.setProductoIdProducto( rs.getString( COLUMN_PRODUCTO_ID_PRODUCTO ) );
		dto.setProveedorTipoDocumentoTipoDocumento( rs.getString( COLUMN_PROVEEDOR_TIPO_DOCUMENTO_TIPO_DOCUMENTO ) );
		dto.setProveedorNumDocumento( rs.getString( COLUMN_PROVEEDOR_NUM_DOCUMENTO ) );
		dto.setFechaCompra( rs.getDate(COLUMN_FECHA_COMPRA ) );
		dto.setCanProComprado( rs.getInt( COLUMN_CAN_PRO_COMPRADO ) );
		if (rs.wasNull()) {
			dto.setCanProCompradoNull( true );
		}
		
		dto.setPrecioPorMayor( rs.getFloat( COLUMN_PRECIO_POR_MAYOR ) );
		if (rs.wasNull()) {
			dto.setPrecioPorMayorNull( true );
		}
		
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(InventarioCompras dto)
	{
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the specified arbitrary SQL statement
	 */
	public InventarioCompras[] findByDynamicSelect(String sql, Object[] sqlParams) throws InventarioComprasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioComprasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the inventario_compras table that match the specified arbitrary SQL statement
	 */
	public InventarioCompras[] findByDynamicWhere(String sql, Object[] sqlParams) throws InventarioComprasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioComprasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
