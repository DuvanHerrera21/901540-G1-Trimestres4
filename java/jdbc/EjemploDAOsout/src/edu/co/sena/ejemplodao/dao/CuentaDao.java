/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.ejemplodao.dao;

import edu.co.sena.ejemplodao.dto.*;
import edu.co.sena.ejemplodao.exceptions.*;

public interface CuentaDao
{
	/** 
	 * Inserts a new row in the cuenta table.
	 */
	public CuentaPk insert(Cuenta dto) throws CuentaDaoException;

	/** 
	 * Updates a single row in the cuenta table.
	 */
	public void update(CuentaPk pk, Cuenta dto) throws CuentaDaoException;

	/** 
	 * Deletes a single row in the cuenta table.
	 */
	public void delete(CuentaPk pk) throws CuentaDaoException;

	/** 
	 * Returns the rows from the cuenta table that matches the specified primary-key value.
	 */
	public Cuenta findByPrimaryKey(CuentaPk pk) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento AND NUMERO_DOCUMENTO = :numeroDocumento'.
	 */
	public Cuenta findByPrimaryKey(String tipoDocumentoTipoDocumento, String numeroDocumento) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria ''.
	 */
	public Cuenta[] findAll() throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Cuenta[] findByTipoDocumento(String tipoDocumentoTipoDocumento) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'USUARIO_ID_USUARIO = :usuarioIdUsuario'.
	 */
	public Cuenta[] findByUsuario(String usuarioIdUsuario) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Cuenta[] findWhereTipoDocumentoTipoDocumentoEquals(String tipoDocumentoTipoDocumento) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'NUMERO_DOCUMENTO = :numeroDocumento'.
	 */
	public Cuenta[] findWhereNumeroDocumentoEquals(String numeroDocumento) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'PRIMER_NOMBRE = :primerNombre'.
	 */
	public Cuenta[] findWherePrimerNombreEquals(String primerNombre) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'SEGUNRO_NOMBRE = :segunroNombre'.
	 */
	public Cuenta[] findWhereSegunroNombreEquals(String segunroNombre) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'PRIMER_APELLIDO = :primerApellido'.
	 */
	public Cuenta[] findWherePrimerApellidoEquals(String primerApellido) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'SEGUNDO_APELLIDO = :segundoApellido'.
	 */
	public Cuenta[] findWhereSegundoApellidoEquals(String segundoApellido) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'USUARIO_ID_USUARIO = :usuarioIdUsuario'.
	 */
	public Cuenta[] findWhereUsuarioIdUsuarioEquals(String usuarioIdUsuario) throws CuentaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaDaoException;

}
