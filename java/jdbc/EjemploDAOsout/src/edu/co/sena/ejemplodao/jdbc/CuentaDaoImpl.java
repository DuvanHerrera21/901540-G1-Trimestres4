/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.ejemplodao.jdbc;

import edu.co.sena.ejemplodao.dao.*;
import edu.co.sena.ejemplodao.factory.*;
import edu.co.sena.ejemplodao.dto.*;
import edu.co.sena.ejemplodao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CuentaDaoImpl extends AbstractDAO implements CuentaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT TIPO_DOCUMENTO_TIPO_DOCUMENTO, NUMERO_DOCUMENTO, PRIMER_NOMBRE, SEGUNRO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, USUARIO_ID_USUARIO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( TIPO_DOCUMENTO_TIPO_DOCUMENTO, NUMERO_DOCUMENTO, PRIMER_NOMBRE, SEGUNRO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, USUARIO_ID_USUARIO ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET TIPO_DOCUMENTO_TIPO_DOCUMENTO = ?, NUMERO_DOCUMENTO = ?, PRIMER_NOMBRE = ?, SEGUNRO_NOMBRE = ?, PRIMER_APELLIDO = ?, SEGUNDO_APELLIDO = ?, USUARIO_ID_USUARIO = ? WHERE TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND NUMERO_DOCUMENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND NUMERO_DOCUMENTO = ?";

	/** 
	 * Index of column TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int COLUMN_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 1;

	/** 
	 * Index of column NUMERO_DOCUMENTO
	 */
	protected static final int COLUMN_NUMERO_DOCUMENTO = 2;

	/** 
	 * Index of column PRIMER_NOMBRE
	 */
	protected static final int COLUMN_PRIMER_NOMBRE = 3;

	/** 
	 * Index of column SEGUNRO_NOMBRE
	 */
	protected static final int COLUMN_SEGUNRO_NOMBRE = 4;

	/** 
	 * Index of column PRIMER_APELLIDO
	 */
	protected static final int COLUMN_PRIMER_APELLIDO = 5;

	/** 
	 * Index of column SEGUNDO_APELLIDO
	 */
	protected static final int COLUMN_SEGUNDO_APELLIDO = 6;

	/** 
	 * Index of column USUARIO_ID_USUARIO
	 */
	protected static final int COLUMN_USUARIO_ID_USUARIO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int PK_COLUMN_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 1;

	/** 
	 * Index of primary-key column NUMERO_DOCUMENTO
	 */
	protected static final int PK_COLUMN_NUMERO_DOCUMENTO = 2;

	/** 
	 * Inserts a new row in the cuenta table.
	 */
	public CuentaPk insert(Cuenta dto) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getNumeroDocumento() );
			stmt.setString( index++, dto.getPrimerNombre() );
			stmt.setString( index++, dto.getSegunroNombre() );
			stmt.setString( index++, dto.getPrimerApellido() );
			stmt.setString( index++, dto.getSegundoApellido() );
			stmt.setString( index++, dto.getUsuarioIdUsuario() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cuenta table.
	 */
	public void update(CuentaPk pk, Cuenta dto) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getNumeroDocumento() );
			stmt.setString( index++, dto.getPrimerNombre() );
			stmt.setString( index++, dto.getSegunroNombre() );
			stmt.setString( index++, dto.getPrimerApellido() );
			stmt.setString( index++, dto.getSegundoApellido() );
			stmt.setString( index++, dto.getUsuarioIdUsuario() );
			stmt.setString( 8, pk.getTipoDocumentoTipoDocumento() );
			stmt.setString( 9, pk.getNumeroDocumento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cuenta table.
	 */
	public void delete(CuentaPk pk) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getTipoDocumentoTipoDocumento() );
			stmt.setString( 2, pk.getNumeroDocumento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cuenta table that matches the specified primary-key value.
	 */
	public Cuenta findByPrimaryKey(CuentaPk pk) throws CuentaDaoException
	{
		return findByPrimaryKey( pk.getTipoDocumentoTipoDocumento(), pk.getNumeroDocumento() );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento AND NUMERO_DOCUMENTO = :numeroDocumento'.
	 */
	public Cuenta findByPrimaryKey(String tipoDocumentoTipoDocumento, String numeroDocumento) throws CuentaDaoException
	{
		Cuenta ret[] = findByDynamicSelect( SQL_SELECT + " WHERE TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND NUMERO_DOCUMENTO = ?", new Object[] { tipoDocumentoTipoDocumento, numeroDocumento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria ''.
	 */
	public Cuenta[] findAll() throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY TIPO_DOCUMENTO_TIPO_DOCUMENTO, NUMERO_DOCUMENTO", null );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Cuenta[] findByTipoDocumento(String tipoDocumentoTipoDocumento) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_DOCUMENTO_TIPO_DOCUMENTO = ?", new Object[] { tipoDocumentoTipoDocumento } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'USUARIO_ID_USUARIO = :usuarioIdUsuario'.
	 */
	public Cuenta[] findByUsuario(String usuarioIdUsuario) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO_ID_USUARIO = ?", new Object[] { usuarioIdUsuario } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Cuenta[] findWhereTipoDocumentoTipoDocumentoEquals(String tipoDocumentoTipoDocumento) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? ORDER BY TIPO_DOCUMENTO_TIPO_DOCUMENTO", new Object[] { tipoDocumentoTipoDocumento } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'NUMERO_DOCUMENTO = :numeroDocumento'.
	 */
	public Cuenta[] findWhereNumeroDocumentoEquals(String numeroDocumento) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_DOCUMENTO = ? ORDER BY NUMERO_DOCUMENTO", new Object[] { numeroDocumento } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'PRIMER_NOMBRE = :primerNombre'.
	 */
	public Cuenta[] findWherePrimerNombreEquals(String primerNombre) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIMER_NOMBRE = ? ORDER BY PRIMER_NOMBRE", new Object[] { primerNombre } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'SEGUNRO_NOMBRE = :segunroNombre'.
	 */
	public Cuenta[] findWhereSegunroNombreEquals(String segunroNombre) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEGUNRO_NOMBRE = ? ORDER BY SEGUNRO_NOMBRE", new Object[] { segunroNombre } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'PRIMER_APELLIDO = :primerApellido'.
	 */
	public Cuenta[] findWherePrimerApellidoEquals(String primerApellido) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIMER_APELLIDO = ? ORDER BY PRIMER_APELLIDO", new Object[] { primerApellido } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'SEGUNDO_APELLIDO = :segundoApellido'.
	 */
	public Cuenta[] findWhereSegundoApellidoEquals(String segundoApellido) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEGUNDO_APELLIDO = ? ORDER BY SEGUNDO_APELLIDO", new Object[] { segundoApellido } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'USUARIO_ID_USUARIO = :usuarioIdUsuario'.
	 */
	public Cuenta[] findWhereUsuarioIdUsuarioEquals(String usuarioIdUsuario) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO_ID_USUARIO = ? ORDER BY USUARIO_ID_USUARIO", new Object[] { usuarioIdUsuario } );
	}

	/**
	 * Method 'CuentaDaoImpl'
	 * 
	 */
	public CuentaDaoImpl()
	{
	}

	/**
	 * Method 'CuentaDaoImpl'
	 * 
	 * @param userConn
	 */
	public CuentaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tienda_online2.cuenta";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Cuenta fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Cuenta dto = new Cuenta();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Cuenta[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Cuenta dto = new Cuenta();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Cuenta ret[] = new Cuenta[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Cuenta dto, ResultSet rs) throws SQLException
	{
		dto.setTipoDocumentoTipoDocumento( rs.getString( COLUMN_TIPO_DOCUMENTO_TIPO_DOCUMENTO ) );
		dto.setNumeroDocumento( rs.getString( COLUMN_NUMERO_DOCUMENTO ) );
		dto.setPrimerNombre( rs.getString( COLUMN_PRIMER_NOMBRE ) );
		dto.setSegunroNombre( rs.getString( COLUMN_SEGUNRO_NOMBRE ) );
		dto.setPrimerApellido( rs.getString( COLUMN_PRIMER_APELLIDO ) );
		dto.setSegundoApellido( rs.getString( COLUMN_SEGUNDO_APELLIDO ) );
		dto.setUsuarioIdUsuario( rs.getString( COLUMN_USUARIO_ID_USUARIO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Cuenta dto)
	{
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
