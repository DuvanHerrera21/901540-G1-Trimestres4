/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.ejemplodao.modelo.jdbc;

import edu.co.sena.ejemplodao.modelo.dao.*;
import edu.co.sena.ejemplodao.modelo.factory.*;
import edu.co.sena.ejemplodao.modelo.dto.*;
import edu.co.sena.ejemplodao.modelo.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DomicilioCuentasDaoImpl extends AbstractDAO implements DomicilioCuentasDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT DIRECCION, TELEFONO, BARRIO, LOCALIDAD, CORREO_POSTAL, MUNICIPIO_ID_MUNICIPIO, CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO, CUENTA_NUMERO_DOCUMENTO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( DIRECCION, TELEFONO, BARRIO, LOCALIDAD, CORREO_POSTAL, MUNICIPIO_ID_MUNICIPIO, CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO, CUENTA_NUMERO_DOCUMENTO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET DIRECCION = ?, TELEFONO = ?, BARRIO = ?, LOCALIDAD = ?, CORREO_POSTAL = ?, MUNICIPIO_ID_MUNICIPIO = ?, CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ?, CUENTA_NUMERO_DOCUMENTO = ? WHERE CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND CUENTA_NUMERO_DOCUMENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND CUENTA_NUMERO_DOCUMENTO = ?";

	/** 
	 * Index of column DIRECCION
	 */
	protected static final int COLUMN_DIRECCION = 1;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 2;

	/** 
	 * Index of column BARRIO
	 */
	protected static final int COLUMN_BARRIO = 3;

	/** 
	 * Index of column LOCALIDAD
	 */
	protected static final int COLUMN_LOCALIDAD = 4;

	/** 
	 * Index of column CORREO_POSTAL
	 */
	protected static final int COLUMN_CORREO_POSTAL = 5;

	/** 
	 * Index of column MUNICIPIO_ID_MUNICIPIO
	 */
	protected static final int COLUMN_MUNICIPIO_ID_MUNICIPIO = 6;

	/** 
	 * Index of column CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int COLUMN_CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 7;

	/** 
	 * Index of column CUENTA_NUMERO_DOCUMENTO
	 */
	protected static final int COLUMN_CUENTA_NUMERO_DOCUMENTO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO
	 */
	protected static final int PK_COLUMN_CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = 1;

	/** 
	 * Index of primary-key column CUENTA_NUMERO_DOCUMENTO
	 */
	protected static final int PK_COLUMN_CUENTA_NUMERO_DOCUMENTO = 2;

	/** 
	 * Inserts a new row in the domicilio_cuentas table.
	 */
	public DomicilioCuentasPk insert(DomicilioCuentas dto) throws DomicilioCuentasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getBarrio() );
			stmt.setString( index++, dto.getLocalidad() );
			stmt.setString( index++, dto.getCorreoPostal() );
			stmt.setInt( index++, dto.getMunicipioIdMunicipio() );
			stmt.setString( index++, dto.getCuentaTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getCuentaNumeroDocumento() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the domicilio_cuentas table.
	 */
	public void update(DomicilioCuentasPk pk, DomicilioCuentas dto) throws DomicilioCuentasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getBarrio() );
			stmt.setString( index++, dto.getLocalidad() );
			stmt.setString( index++, dto.getCorreoPostal() );
			stmt.setInt( index++, dto.getMunicipioIdMunicipio() );
			stmt.setString( index++, dto.getCuentaTipoDocumentoTipoDocumento() );
			stmt.setString( index++, dto.getCuentaNumeroDocumento() );
			stmt.setString( 9, pk.getCuentaTipoDocumentoTipoDocumento() );
			stmt.setString( 10, pk.getCuentaNumeroDocumento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the domicilio_cuentas table.
	 */
	public void delete(DomicilioCuentasPk pk) throws DomicilioCuentasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getCuentaTipoDocumentoTipoDocumento() );
			stmt.setString( 2, pk.getCuentaNumeroDocumento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the domicilio_cuentas table that matches the specified primary-key value.
	 */
	public DomicilioCuentas findByPrimaryKey(DomicilioCuentasPk pk) throws DomicilioCuentasDaoException
	{
		return findByPrimaryKey( pk.getCuentaTipoDocumentoTipoDocumento(), pk.getCuentaNumeroDocumento() );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :cuentaTipoDocumentoTipoDocumento AND CUENTA_NUMERO_DOCUMENTO = :cuentaNumeroDocumento'.
	 */
	public DomicilioCuentas findByPrimaryKey(String cuentaTipoDocumentoTipoDocumento, String cuentaNumeroDocumento) throws DomicilioCuentasDaoException
	{
		DomicilioCuentas ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND CUENTA_NUMERO_DOCUMENTO = ?", new Object[] { cuentaTipoDocumentoTipoDocumento, cuentaNumeroDocumento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria ''.
	 */
	public DomicilioCuentas[] findAll() throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO, CUENTA_NUMERO_DOCUMENTO", null );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :cuentaTipoDocumentoTipoDocumento AND CUENTA_NUMERO_DOCUMENTO = :cuentaNumeroDocumento'.
	 */
	public DomicilioCuentas[] findByCuenta(String cuentaTipoDocumentoTipoDocumento, String cuentaNumeroDocumento) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? AND CUENTA_NUMERO_DOCUMENTO = ?", new Object[] { cuentaTipoDocumentoTipoDocumento, cuentaNumeroDocumento } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'MUNICIPIO_ID_MUNICIPIO = :municipioIdMunicipio'.
	 */
	public DomicilioCuentas[] findByMunicipio(int municipioIdMunicipio) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUNICIPIO_ID_MUNICIPIO = ?", new Object[] {  new Integer(municipioIdMunicipio) } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'DIRECCION = :direccion'.
	 */
	public DomicilioCuentas[] findWhereDireccionEquals(String direccion) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIRECCION = ? ORDER BY DIRECCION", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'TELEFONO = :telefono'.
	 */
	public DomicilioCuentas[] findWhereTelefonoEquals(String telefono) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'BARRIO = :barrio'.
	 */
	public DomicilioCuentas[] findWhereBarrioEquals(String barrio) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BARRIO = ? ORDER BY BARRIO", new Object[] { barrio } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'LOCALIDAD = :localidad'.
	 */
	public DomicilioCuentas[] findWhereLocalidadEquals(String localidad) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIDAD = ? ORDER BY LOCALIDAD", new Object[] { localidad } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'CORREO_POSTAL = :correoPostal'.
	 */
	public DomicilioCuentas[] findWhereCorreoPostalEquals(String correoPostal) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO_POSTAL = ? ORDER BY CORREO_POSTAL", new Object[] { correoPostal } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'MUNICIPIO_ID_MUNICIPIO = :municipioIdMunicipio'.
	 */
	public DomicilioCuentas[] findWhereMunicipioIdMunicipioEquals(int municipioIdMunicipio) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUNICIPIO_ID_MUNICIPIO = ? ORDER BY MUNICIPIO_ID_MUNICIPIO", new Object[] {  new Integer(municipioIdMunicipio) } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = :cuentaTipoDocumentoTipoDocumento'.
	 */
	public DomicilioCuentas[] findWhereCuentaTipoDocumentoTipoDocumentoEquals(String cuentaTipoDocumentoTipoDocumento) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO = ? ORDER BY CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO", new Object[] { cuentaTipoDocumentoTipoDocumento } );
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the criteria 'CUENTA_NUMERO_DOCUMENTO = :cuentaNumeroDocumento'.
	 */
	public DomicilioCuentas[] findWhereCuentaNumeroDocumentoEquals(String cuentaNumeroDocumento) throws DomicilioCuentasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUENTA_NUMERO_DOCUMENTO = ? ORDER BY CUENTA_NUMERO_DOCUMENTO", new Object[] { cuentaNumeroDocumento } );
	}

	/**
	 * Method 'DomicilioCuentasDaoImpl'
	 * 
	 */
	public DomicilioCuentasDaoImpl()
	{
	}

	/**
	 * Method 'DomicilioCuentasDaoImpl'
	 * 
	 * @param userConn
	 */
	public DomicilioCuentasDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tienda_online2.domicilio_cuentas";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected DomicilioCuentas fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			DomicilioCuentas dto = new DomicilioCuentas();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected DomicilioCuentas[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DomicilioCuentas dto = new DomicilioCuentas();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		DomicilioCuentas ret[] = new DomicilioCuentas[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DomicilioCuentas dto, ResultSet rs) throws SQLException
	{
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setBarrio( rs.getString( COLUMN_BARRIO ) );
		dto.setLocalidad( rs.getString( COLUMN_LOCALIDAD ) );
		dto.setCorreoPostal( rs.getString( COLUMN_CORREO_POSTAL ) );
		dto.setMunicipioIdMunicipio( rs.getInt( COLUMN_MUNICIPIO_ID_MUNICIPIO ) );
		dto.setCuentaTipoDocumentoTipoDocumento( rs.getString( COLUMN_CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO ) );
		dto.setCuentaNumeroDocumento( rs.getString( COLUMN_CUENTA_NUMERO_DOCUMENTO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DomicilioCuentas dto)
	{
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuentas[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioCuentasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the domicilio_cuentas table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuentas[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioCuentasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
