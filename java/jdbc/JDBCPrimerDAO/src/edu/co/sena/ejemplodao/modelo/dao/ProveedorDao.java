/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.ejemplodao.modelo.dao;

import edu.co.sena.ejemplodao.modelo.dto.*;
import edu.co.sena.ejemplodao.modelo.exceptions.*;

public interface ProveedorDao
{
	/** 
	 * Inserts a new row in the proveedor table.
	 */
	public ProveedorPk insert(Proveedor dto) throws ProveedorDaoException;

	/** 
	 * Updates a single row in the proveedor table.
	 */
	public void update(ProveedorPk pk, Proveedor dto) throws ProveedorDaoException;

	/** 
	 * Deletes a single row in the proveedor table.
	 */
	public void delete(ProveedorPk pk) throws ProveedorDaoException;

	/** 
	 * Returns the rows from the proveedor table that matches the specified primary-key value.
	 */
	public Proveedor findByPrimaryKey(ProveedorPk pk) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento AND NUM_DOCUMENTO = :numDocumento'.
	 */
	public Proveedor findByPrimaryKey(String tipoDocumentoTipoDocumento, String numDocumento) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria ''.
	 */
	public Proveedor[] findAll() throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Proveedor[] findByTipoDocumento(String tipoDocumentoTipoDocumento) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'TIPO_DOCUMENTO_TIPO_DOCUMENTO = :tipoDocumentoTipoDocumento'.
	 */
	public Proveedor[] findWhereTipoDocumentoTipoDocumentoEquals(String tipoDocumentoTipoDocumento) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'NUM_DOCUMENTO = :numDocumento'.
	 */
	public Proveedor[] findWhereNumDocumentoEquals(String numDocumento) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'NOMBRE_PROVEEDOR = :nombreProveedor'.
	 */
	public Proveedor[] findWhereNombreProveedorEquals(String nombreProveedor) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the criteria 'CORREO = :correo'.
	 */
	public Proveedor[] findWhereCorreoEquals(String correo) throws ProveedorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the proveedor table that match the specified arbitrary SQL statement
	 */
	public Proveedor[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProveedorDaoException;

	/** 
	 * Returns all rows from the proveedor table that match the specified arbitrary SQL statement
	 */
	public Proveedor[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProveedorDaoException;

}
